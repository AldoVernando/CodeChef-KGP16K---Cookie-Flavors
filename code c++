#include <bits/stdc++.h>
using namespace std;

vector<int> vCookies;
vector<int> vHanu;
int lps[1000001];
vector<int> duplicateCookies;
vector<int> duplicateHanus;

void computeLPSArray(int cookies) 
{ 
    int len = 0; 
  
    lps[0] = 0;
  
    int i = 1; 
    while (i < cookies) { 
        if (vHanu[i] == vHanu[len]) { 
            len++;
            lps[i] = len; 
            i++;
        } 
        else
        { 
            if (len != 0) { 
                len = lps[len-1];  
            } 
            else
            { 
                lps[i] = 0; 
                i++; 
            } 
        } 
    } 
} 

int KMPSearch(int cookie, int hanu) {

    computeLPSArray(hanu);
    int i = 0;
	  int j = 0;
    int result = 0;

    while(i < cookie) {
        if(vHanu[j] == vCookies[i]) {
            if(j == 0) {
                i++;
                j++;
            } 
			  else if(j == 1) {
                if( (duplicateCookies[i] * duplicateHanus[j-1]) <= (duplicateCookies[i-1] * duplicateHanus[j])
				&& (duplicateCookies[i] % duplicateHanus[j]) == 0) {
                    j++;
                    i++;
                } 
				else {
                    if(j != 0){
                    	j = lps[j - 1];
					} 
                    else {
                    	i++;
					}
                }
            } 
			else if(j == vHanu.size()-1) {
                if( (duplicateCookies[i] * duplicateHanus[j-1]) >= (duplicateCookies[i-1] * duplicateHanus[j])) {
                    j++;
                    i++;
                    j = lps[j-1];
                    
                    result++;
                }
			else {
                    if(j != 0) {
                    	j = lps[j-1];
					          }
                    else{
                      i++;
					            }
                }
            } 
			else {
                if((duplicateCookies[i] * duplicateHanus[j-1])== (duplicateCookies[i-1] * duplicateHanus[j])) {
                    j++;
                    i++;
                } 
				else {
                if(j != 0){
                  j = lps[j-1];
					      }
                else{
                 	i++;
					      }
             }
          }
        }
        else if(i < cookie && vHanu[j] != vCookies[i]) {
            if(j != 0){
            	j = lps[j-1];
			} 
            else{
            	i++;
			}
        }
    }

    return result;
}

int main(){
 
 int test;
 int cookies, hanuBase;
 
 cin >> test;
 
 for(int i=0;i<test;i++){
  vCookies.clear();
  vHanu.clear();
  duplicateCookies.clear();
  duplicateHanus.clear();
  
  cin >> cookies >> hanuBase;
  
  int index = 0;
  
  for(int j=0;j<cookies;j++){
   int c;
   cin >> c;
   
   if(vCookies.empty()){
        vCookies.push_back(c);
        duplicateCookies.push_back(1);
    }
    else {
        if(c != vCookies[index]) {
            vCookies.push_back(c);
            duplicateCookies.push_back(1);
            
            index++;
        } else {
        	  int last = duplicateCookies.size() - 1;
            duplicateCookies[last] += 1;
        }
    }
  }
  
  index = 0;
  
  for(int j=0;j<hanuBase;j++){
   int h;
   cin >> h;   
   
   if(vHanu.empty()){
        vHanu.push_back(h);
        duplicateHanus.push_back(1);
    }
    else {
        if(h != vHanu[index]) {
            vHanu.push_back(h);
            duplicateHanus.push_back(1);
            
            index++;
        } else {
        	  int last = duplicateHanus.size() - 1;
            duplicateHanus[last] += 1;
        }
    }
  }
  
  cout << KMPSearch(vCookies.size(),vHanu.size()) << endl;
  
 }
 
 return 0;
}
